# source: http://localhost:4466
# timestamp: Fri Nov 16 2018 23:38:38 GMT-0800 (Pacific Standard Time)

type AggregateAnime {
  count: Int!
}

type AggregateAPIKey {
  count: Int!
}

type AggregateArchive {
  count: Int!
}

type AggregateCharacter {
  count: Int!
}

type AggregateDialogue {
  count: Int!
}

type AggregateEpisode {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateSeason {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Anime implements Node {
  id: ID!
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character!]
  episodes(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Episode!]
  dialogues(where: DialogueWhereInput, orderBy: DialogueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dialogue!]
  seasons(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Season!]
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AnimeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnimeEdge]!
  aggregate: AggregateAnime!
}

input AnimeCreateInput {
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterCreateManyWithoutAnimesInput
  episodes: EpisodeCreateManyWithoutAnimeInput
  dialogues: DialogueCreateManyWithoutAnimeInput
  seasons: SeasonCreateManyWithoutAnimeInput
  files: FileCreateManyWithoutAnimeInput
}

input AnimeCreateManyWithoutCharactersInput {
  create: [AnimeCreateWithoutCharactersInput!]
  connect: [AnimeWhereUniqueInput!]
}

input AnimeCreateOneWithoutDialoguesInput {
  create: AnimeCreateWithoutDialoguesInput
  connect: AnimeWhereUniqueInput
}

input AnimeCreateOneWithoutEpisodesInput {
  create: AnimeCreateWithoutEpisodesInput
  connect: AnimeWhereUniqueInput
}

input AnimeCreateOneWithoutFilesInput {
  create: AnimeCreateWithoutFilesInput
  connect: AnimeWhereUniqueInput
}

input AnimeCreateOneWithoutSeasonsInput {
  create: AnimeCreateWithoutSeasonsInput
  connect: AnimeWhereUniqueInput
}

input AnimeCreateWithoutCharactersInput {
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  episodes: EpisodeCreateManyWithoutAnimeInput
  dialogues: DialogueCreateManyWithoutAnimeInput
  seasons: SeasonCreateManyWithoutAnimeInput
  files: FileCreateManyWithoutAnimeInput
}

input AnimeCreateWithoutDialoguesInput {
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterCreateManyWithoutAnimesInput
  episodes: EpisodeCreateManyWithoutAnimeInput
  seasons: SeasonCreateManyWithoutAnimeInput
  files: FileCreateManyWithoutAnimeInput
}

input AnimeCreateWithoutEpisodesInput {
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterCreateManyWithoutAnimesInput
  dialogues: DialogueCreateManyWithoutAnimeInput
  seasons: SeasonCreateManyWithoutAnimeInput
  files: FileCreateManyWithoutAnimeInput
}

input AnimeCreateWithoutFilesInput {
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterCreateManyWithoutAnimesInput
  episodes: EpisodeCreateManyWithoutAnimeInput
  dialogues: DialogueCreateManyWithoutAnimeInput
  seasons: SeasonCreateManyWithoutAnimeInput
}

input AnimeCreateWithoutSeasonsInput {
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterCreateManyWithoutAnimesInput
  episodes: EpisodeCreateManyWithoutAnimeInput
  dialogues: DialogueCreateManyWithoutAnimeInput
  files: FileCreateManyWithoutAnimeInput
}

"""An edge in a connection."""
type AnimeEdge {
  """The item at the end of the edge."""
  node: Anime!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnimeOrderByInput {
  id_ASC
  id_DESC
  anilistId_ASC
  anilistId_DESC
  malId_ASC
  malId_DESC
  rawName_ASC
  rawName_DESC
  name_ASC
  name_DESC
  thumbnailUrl_ASC
  thumbnailUrl_DESC
  bannerUrl_ASC
  bannerUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnimePreviousValues {
  id: ID!
  anilistId: Int
  malId: Int
  rawName: String!
  name: String
  thumbnailUrl: String
  bannerUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AnimeSubscriptionPayload {
  mutation: MutationType!
  node: Anime
  updatedFields: [String!]
  previousValues: AnimePreviousValues
}

input AnimeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnimeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnimeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnimeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnimeWhereInput
}

input AnimeUpdateInput {
  anilistId: Int
  malId: Int
  rawName: String
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterUpdateManyWithoutAnimesInput
  episodes: EpisodeUpdateManyWithoutAnimeInput
  dialogues: DialogueUpdateManyWithoutAnimeInput
  seasons: SeasonUpdateManyWithoutAnimeInput
  files: FileUpdateManyWithoutAnimeInput
}

input AnimeUpdateManyWithoutCharactersInput {
  create: [AnimeCreateWithoutCharactersInput!]
  connect: [AnimeWhereUniqueInput!]
  disconnect: [AnimeWhereUniqueInput!]
  delete: [AnimeWhereUniqueInput!]
  update: [AnimeUpdateWithWhereUniqueWithoutCharactersInput!]
  upsert: [AnimeUpsertWithWhereUniqueWithoutCharactersInput!]
}

input AnimeUpdateOneRequiredWithoutDialoguesInput {
  create: AnimeCreateWithoutDialoguesInput
  connect: AnimeWhereUniqueInput
  update: AnimeUpdateWithoutDialoguesDataInput
  upsert: AnimeUpsertWithoutDialoguesInput
}

input AnimeUpdateOneRequiredWithoutEpisodesInput {
  create: AnimeCreateWithoutEpisodesInput
  connect: AnimeWhereUniqueInput
  update: AnimeUpdateWithoutEpisodesDataInput
  upsert: AnimeUpsertWithoutEpisodesInput
}

input AnimeUpdateOneRequiredWithoutFilesInput {
  create: AnimeCreateWithoutFilesInput
  connect: AnimeWhereUniqueInput
  update: AnimeUpdateWithoutFilesDataInput
  upsert: AnimeUpsertWithoutFilesInput
}

input AnimeUpdateOneRequiredWithoutSeasonsInput {
  create: AnimeCreateWithoutSeasonsInput
  connect: AnimeWhereUniqueInput
  update: AnimeUpdateWithoutSeasonsDataInput
  upsert: AnimeUpsertWithoutSeasonsInput
}

input AnimeUpdateWithoutCharactersDataInput {
  anilistId: Int
  malId: Int
  rawName: String
  name: String
  thumbnailUrl: String
  bannerUrl: String
  episodes: EpisodeUpdateManyWithoutAnimeInput
  dialogues: DialogueUpdateManyWithoutAnimeInput
  seasons: SeasonUpdateManyWithoutAnimeInput
  files: FileUpdateManyWithoutAnimeInput
}

input AnimeUpdateWithoutDialoguesDataInput {
  anilistId: Int
  malId: Int
  rawName: String
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterUpdateManyWithoutAnimesInput
  episodes: EpisodeUpdateManyWithoutAnimeInput
  seasons: SeasonUpdateManyWithoutAnimeInput
  files: FileUpdateManyWithoutAnimeInput
}

input AnimeUpdateWithoutEpisodesDataInput {
  anilistId: Int
  malId: Int
  rawName: String
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterUpdateManyWithoutAnimesInput
  dialogues: DialogueUpdateManyWithoutAnimeInput
  seasons: SeasonUpdateManyWithoutAnimeInput
  files: FileUpdateManyWithoutAnimeInput
}

input AnimeUpdateWithoutFilesDataInput {
  anilistId: Int
  malId: Int
  rawName: String
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterUpdateManyWithoutAnimesInput
  episodes: EpisodeUpdateManyWithoutAnimeInput
  dialogues: DialogueUpdateManyWithoutAnimeInput
  seasons: SeasonUpdateManyWithoutAnimeInput
}

input AnimeUpdateWithoutSeasonsDataInput {
  anilistId: Int
  malId: Int
  rawName: String
  name: String
  thumbnailUrl: String
  bannerUrl: String
  characters: CharacterUpdateManyWithoutAnimesInput
  episodes: EpisodeUpdateManyWithoutAnimeInput
  dialogues: DialogueUpdateManyWithoutAnimeInput
  files: FileUpdateManyWithoutAnimeInput
}

input AnimeUpdateWithWhereUniqueWithoutCharactersInput {
  where: AnimeWhereUniqueInput!
  data: AnimeUpdateWithoutCharactersDataInput!
}

input AnimeUpsertWithoutDialoguesInput {
  update: AnimeUpdateWithoutDialoguesDataInput!
  create: AnimeCreateWithoutDialoguesInput!
}

input AnimeUpsertWithoutEpisodesInput {
  update: AnimeUpdateWithoutEpisodesDataInput!
  create: AnimeCreateWithoutEpisodesInput!
}

input AnimeUpsertWithoutFilesInput {
  update: AnimeUpdateWithoutFilesDataInput!
  create: AnimeCreateWithoutFilesInput!
}

input AnimeUpsertWithoutSeasonsInput {
  update: AnimeUpdateWithoutSeasonsDataInput!
  create: AnimeCreateWithoutSeasonsInput!
}

input AnimeUpsertWithWhereUniqueWithoutCharactersInput {
  where: AnimeWhereUniqueInput!
  update: AnimeUpdateWithoutCharactersDataInput!
  create: AnimeCreateWithoutCharactersInput!
}

input AnimeWhereInput {
  """Logical AND on all given filters."""
  AND: [AnimeWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnimeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnimeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  anilistId: Int

  """All values that are not equal to given value."""
  anilistId_not: Int

  """All values that are contained in given list."""
  anilistId_in: [Int!]

  """All values that are not contained in given list."""
  anilistId_not_in: [Int!]

  """All values less than the given value."""
  anilistId_lt: Int

  """All values less than or equal the given value."""
  anilistId_lte: Int

  """All values greater than the given value."""
  anilistId_gt: Int

  """All values greater than or equal the given value."""
  anilistId_gte: Int
  malId: Int

  """All values that are not equal to given value."""
  malId_not: Int

  """All values that are contained in given list."""
  malId_in: [Int!]

  """All values that are not contained in given list."""
  malId_not_in: [Int!]

  """All values less than the given value."""
  malId_lt: Int

  """All values less than or equal the given value."""
  malId_lte: Int

  """All values greater than the given value."""
  malId_gt: Int

  """All values greater than or equal the given value."""
  malId_gte: Int
  rawName: String

  """All values that are not equal to given value."""
  rawName_not: String

  """All values that are contained in given list."""
  rawName_in: [String!]

  """All values that are not contained in given list."""
  rawName_not_in: [String!]

  """All values less than the given value."""
  rawName_lt: String

  """All values less than or equal the given value."""
  rawName_lte: String

  """All values greater than the given value."""
  rawName_gt: String

  """All values greater than or equal the given value."""
  rawName_gte: String

  """All values containing the given string."""
  rawName_contains: String

  """All values not containing the given string."""
  rawName_not_contains: String

  """All values starting with the given string."""
  rawName_starts_with: String

  """All values not starting with the given string."""
  rawName_not_starts_with: String

  """All values ending with the given string."""
  rawName_ends_with: String

  """All values not ending with the given string."""
  rawName_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  thumbnailUrl: String

  """All values that are not equal to given value."""
  thumbnailUrl_not: String

  """All values that are contained in given list."""
  thumbnailUrl_in: [String!]

  """All values that are not contained in given list."""
  thumbnailUrl_not_in: [String!]

  """All values less than the given value."""
  thumbnailUrl_lt: String

  """All values less than or equal the given value."""
  thumbnailUrl_lte: String

  """All values greater than the given value."""
  thumbnailUrl_gt: String

  """All values greater than or equal the given value."""
  thumbnailUrl_gte: String

  """All values containing the given string."""
  thumbnailUrl_contains: String

  """All values not containing the given string."""
  thumbnailUrl_not_contains: String

  """All values starting with the given string."""
  thumbnailUrl_starts_with: String

  """All values not starting with the given string."""
  thumbnailUrl_not_starts_with: String

  """All values ending with the given string."""
  thumbnailUrl_ends_with: String

  """All values not ending with the given string."""
  thumbnailUrl_not_ends_with: String
  bannerUrl: String

  """All values that are not equal to given value."""
  bannerUrl_not: String

  """All values that are contained in given list."""
  bannerUrl_in: [String!]

  """All values that are not contained in given list."""
  bannerUrl_not_in: [String!]

  """All values less than the given value."""
  bannerUrl_lt: String

  """All values less than or equal the given value."""
  bannerUrl_lte: String

  """All values greater than the given value."""
  bannerUrl_gt: String

  """All values greater than or equal the given value."""
  bannerUrl_gte: String

  """All values containing the given string."""
  bannerUrl_contains: String

  """All values not containing the given string."""
  bannerUrl_not_contains: String

  """All values starting with the given string."""
  bannerUrl_starts_with: String

  """All values not starting with the given string."""
  bannerUrl_not_starts_with: String

  """All values ending with the given string."""
  bannerUrl_ends_with: String

  """All values not ending with the given string."""
  bannerUrl_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  characters_every: CharacterWhereInput
  characters_some: CharacterWhereInput
  characters_none: CharacterWhereInput
  episodes_every: EpisodeWhereInput
  episodes_some: EpisodeWhereInput
  episodes_none: EpisodeWhereInput
  dialogues_every: DialogueWhereInput
  dialogues_some: DialogueWhereInput
  dialogues_none: DialogueWhereInput
  seasons_every: SeasonWhereInput
  seasons_some: SeasonWhereInput
  seasons_none: SeasonWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
}

input AnimeWhereUniqueInput {
  id: ID
  rawName: String
}

type APIKey {
  user(where: UserWhereInput): User!
  token: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type APIKeyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [APIKeyEdge]!
  aggregate: AggregateAPIKey!
}

input APIKeyCreateInput {
  token: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type APIKeyEdge {
  """The item at the end of the edge."""
  node: APIKey!

  """A cursor for use in pagination."""
  cursor: String!
}

enum APIKeyOrderByInput {
  token_ASC
  token_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  id_ASC
  id_DESC
}

type APIKeyPreviousValues {
  token: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type APIKeySubscriptionPayload {
  mutation: MutationType!
  node: APIKey
  updatedFields: [String!]
  previousValues: APIKeyPreviousValues
}

input APIKeySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [APIKeySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [APIKeySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [APIKeySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: APIKeyWhereInput
}

input APIKeyUpdateInput {
  token: String
  user: UserUpdateOneRequiredInput
}

input APIKeyWhereInput {
  """Logical AND on all given filters."""
  AND: [APIKeyWhereInput!]

  """Logical OR on all given filters."""
  OR: [APIKeyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [APIKeyWhereInput!]
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

type Archive implements Node {
  id: ID!
  linkUrl: String
  fileName: String!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ArchiveConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArchiveEdge]!
  aggregate: AggregateArchive!
}

input ArchiveCreateInput {
  linkUrl: String
  fileName: String!
  files: FileCreateManyWithoutArchiveInput
}

input ArchiveCreateOneInput {
  create: ArchiveCreateInput
  connect: ArchiveWhereUniqueInput
}

input ArchiveCreateOneWithoutFilesInput {
  create: ArchiveCreateWithoutFilesInput
  connect: ArchiveWhereUniqueInput
}

input ArchiveCreateWithoutFilesInput {
  linkUrl: String
  fileName: String!
}

"""An edge in a connection."""
type ArchiveEdge {
  """The item at the end of the edge."""
  node: Archive!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ArchiveOrderByInput {
  id_ASC
  id_DESC
  linkUrl_ASC
  linkUrl_DESC
  fileName_ASC
  fileName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ArchivePreviousValues {
  id: ID!
  linkUrl: String
  fileName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ArchiveSubscriptionPayload {
  mutation: MutationType!
  node: Archive
  updatedFields: [String!]
  previousValues: ArchivePreviousValues
}

input ArchiveSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ArchiveSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArchiveSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArchiveSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArchiveWhereInput
}

input ArchiveUpdateDataInput {
  linkUrl: String
  fileName: String
  files: FileUpdateManyWithoutArchiveInput
}

input ArchiveUpdateInput {
  linkUrl: String
  fileName: String
  files: FileUpdateManyWithoutArchiveInput
}

input ArchiveUpdateOneInput {
  create: ArchiveCreateInput
  connect: ArchiveWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ArchiveUpdateDataInput
  upsert: ArchiveUpsertNestedInput
}

input ArchiveUpdateOneWithoutFilesInput {
  create: ArchiveCreateWithoutFilesInput
  connect: ArchiveWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ArchiveUpdateWithoutFilesDataInput
  upsert: ArchiveUpsertWithoutFilesInput
}

input ArchiveUpdateWithoutFilesDataInput {
  linkUrl: String
  fileName: String
}

input ArchiveUpsertNestedInput {
  update: ArchiveUpdateDataInput!
  create: ArchiveCreateInput!
}

input ArchiveUpsertWithoutFilesInput {
  update: ArchiveUpdateWithoutFilesDataInput!
  create: ArchiveCreateWithoutFilesInput!
}

input ArchiveWhereInput {
  """Logical AND on all given filters."""
  AND: [ArchiveWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArchiveWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArchiveWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  linkUrl: String

  """All values that are not equal to given value."""
  linkUrl_not: String

  """All values that are contained in given list."""
  linkUrl_in: [String!]

  """All values that are not contained in given list."""
  linkUrl_not_in: [String!]

  """All values less than the given value."""
  linkUrl_lt: String

  """All values less than or equal the given value."""
  linkUrl_lte: String

  """All values greater than the given value."""
  linkUrl_gt: String

  """All values greater than or equal the given value."""
  linkUrl_gte: String

  """All values containing the given string."""
  linkUrl_contains: String

  """All values not containing the given string."""
  linkUrl_not_contains: String

  """All values starting with the given string."""
  linkUrl_starts_with: String

  """All values not starting with the given string."""
  linkUrl_not_starts_with: String

  """All values ending with the given string."""
  linkUrl_ends_with: String

  """All values not ending with the given string."""
  linkUrl_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values less than the given value."""
  fileName_lt: String

  """All values less than or equal the given value."""
  fileName_lte: String

  """All values greater than the given value."""
  fileName_gt: String

  """All values greater than or equal the given value."""
  fileName_gte: String

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string."""
  fileName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
}

input ArchiveWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Character implements Node {
  id: ID!
  anilistId: Int
  rawName: String!
  name: String
  certainty: Int
  thumbnailUrl: String
  animes(where: AnimeWhereInput, orderBy: AnimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Anime!]
  episodes(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Episode!]
  seasons(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Season!]
  dialogues(where: DialogueWhereInput, orderBy: DialogueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dialogue!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CharacterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CharacterEdge]!
  aggregate: AggregateCharacter!
}

input CharacterCreateInput {
  anilistId: Int
  rawName: String!
  name: String
  certainty: Int
  thumbnailUrl: String
  animes: AnimeCreateManyWithoutCharactersInput
  episodes: EpisodeCreateManyWithoutCharactersInput
  seasons: SeasonCreateManyInput
  dialogues: DialogueCreateManyWithoutCharacterInput
}

input CharacterCreateManyWithoutAnimesInput {
  create: [CharacterCreateWithoutAnimesInput!]
  connect: [CharacterWhereUniqueInput!]
}

input CharacterCreateManyWithoutEpisodesInput {
  create: [CharacterCreateWithoutEpisodesInput!]
  connect: [CharacterWhereUniqueInput!]
}

input CharacterCreateOneWithoutDialoguesInput {
  create: CharacterCreateWithoutDialoguesInput
  connect: CharacterWhereUniqueInput
}

input CharacterCreateWithoutAnimesInput {
  anilistId: Int
  rawName: String!
  name: String
  certainty: Int
  thumbnailUrl: String
  episodes: EpisodeCreateManyWithoutCharactersInput
  seasons: SeasonCreateManyInput
  dialogues: DialogueCreateManyWithoutCharacterInput
}

input CharacterCreateWithoutDialoguesInput {
  anilistId: Int
  rawName: String!
  name: String
  certainty: Int
  thumbnailUrl: String
  animes: AnimeCreateManyWithoutCharactersInput
  episodes: EpisodeCreateManyWithoutCharactersInput
  seasons: SeasonCreateManyInput
}

input CharacterCreateWithoutEpisodesInput {
  anilistId: Int
  rawName: String!
  name: String
  certainty: Int
  thumbnailUrl: String
  animes: AnimeCreateManyWithoutCharactersInput
  seasons: SeasonCreateManyInput
  dialogues: DialogueCreateManyWithoutCharacterInput
}

"""An edge in a connection."""
type CharacterEdge {
  """The item at the end of the edge."""
  node: Character!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CharacterOrderByInput {
  id_ASC
  id_DESC
  anilistId_ASC
  anilistId_DESC
  rawName_ASC
  rawName_DESC
  name_ASC
  name_DESC
  certainty_ASC
  certainty_DESC
  thumbnailUrl_ASC
  thumbnailUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CharacterPreviousValues {
  id: ID!
  anilistId: Int
  rawName: String!
  name: String
  certainty: Int
  thumbnailUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CharacterSubscriptionPayload {
  mutation: MutationType!
  node: Character
  updatedFields: [String!]
  previousValues: CharacterPreviousValues
}

input CharacterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CharacterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CharacterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CharacterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CharacterWhereInput
}

input CharacterUpdateInput {
  anilistId: Int
  rawName: String
  name: String
  certainty: Int
  thumbnailUrl: String
  animes: AnimeUpdateManyWithoutCharactersInput
  episodes: EpisodeUpdateManyWithoutCharactersInput
  seasons: SeasonUpdateManyInput
  dialogues: DialogueUpdateManyWithoutCharacterInput
}

input CharacterUpdateManyWithoutAnimesInput {
  create: [CharacterCreateWithoutAnimesInput!]
  connect: [CharacterWhereUniqueInput!]
  disconnect: [CharacterWhereUniqueInput!]
  delete: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutAnimesInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutAnimesInput!]
}

input CharacterUpdateManyWithoutEpisodesInput {
  create: [CharacterCreateWithoutEpisodesInput!]
  connect: [CharacterWhereUniqueInput!]
  disconnect: [CharacterWhereUniqueInput!]
  delete: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutEpisodesInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutEpisodesInput!]
}

input CharacterUpdateOneRequiredWithoutDialoguesInput {
  create: CharacterCreateWithoutDialoguesInput
  connect: CharacterWhereUniqueInput
  update: CharacterUpdateWithoutDialoguesDataInput
  upsert: CharacterUpsertWithoutDialoguesInput
}

input CharacterUpdateWithoutAnimesDataInput {
  anilistId: Int
  rawName: String
  name: String
  certainty: Int
  thumbnailUrl: String
  episodes: EpisodeUpdateManyWithoutCharactersInput
  seasons: SeasonUpdateManyInput
  dialogues: DialogueUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithoutDialoguesDataInput {
  anilistId: Int
  rawName: String
  name: String
  certainty: Int
  thumbnailUrl: String
  animes: AnimeUpdateManyWithoutCharactersInput
  episodes: EpisodeUpdateManyWithoutCharactersInput
  seasons: SeasonUpdateManyInput
}

input CharacterUpdateWithoutEpisodesDataInput {
  anilistId: Int
  rawName: String
  name: String
  certainty: Int
  thumbnailUrl: String
  animes: AnimeUpdateManyWithoutCharactersInput
  seasons: SeasonUpdateManyInput
  dialogues: DialogueUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithWhereUniqueWithoutAnimesInput {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateWithoutAnimesDataInput!
}

input CharacterUpdateWithWhereUniqueWithoutEpisodesInput {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateWithoutEpisodesDataInput!
}

input CharacterUpsertWithoutDialoguesInput {
  update: CharacterUpdateWithoutDialoguesDataInput!
  create: CharacterCreateWithoutDialoguesInput!
}

input CharacterUpsertWithWhereUniqueWithoutAnimesInput {
  where: CharacterWhereUniqueInput!
  update: CharacterUpdateWithoutAnimesDataInput!
  create: CharacterCreateWithoutAnimesInput!
}

input CharacterUpsertWithWhereUniqueWithoutEpisodesInput {
  where: CharacterWhereUniqueInput!
  update: CharacterUpdateWithoutEpisodesDataInput!
  create: CharacterCreateWithoutEpisodesInput!
}

input CharacterWhereInput {
  """Logical AND on all given filters."""
  AND: [CharacterWhereInput!]

  """Logical OR on all given filters."""
  OR: [CharacterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CharacterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  anilistId: Int

  """All values that are not equal to given value."""
  anilistId_not: Int

  """All values that are contained in given list."""
  anilistId_in: [Int!]

  """All values that are not contained in given list."""
  anilistId_not_in: [Int!]

  """All values less than the given value."""
  anilistId_lt: Int

  """All values less than or equal the given value."""
  anilistId_lte: Int

  """All values greater than the given value."""
  anilistId_gt: Int

  """All values greater than or equal the given value."""
  anilistId_gte: Int
  rawName: String

  """All values that are not equal to given value."""
  rawName_not: String

  """All values that are contained in given list."""
  rawName_in: [String!]

  """All values that are not contained in given list."""
  rawName_not_in: [String!]

  """All values less than the given value."""
  rawName_lt: String

  """All values less than or equal the given value."""
  rawName_lte: String

  """All values greater than the given value."""
  rawName_gt: String

  """All values greater than or equal the given value."""
  rawName_gte: String

  """All values containing the given string."""
  rawName_contains: String

  """All values not containing the given string."""
  rawName_not_contains: String

  """All values starting with the given string."""
  rawName_starts_with: String

  """All values not starting with the given string."""
  rawName_not_starts_with: String

  """All values ending with the given string."""
  rawName_ends_with: String

  """All values not ending with the given string."""
  rawName_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  certainty: Int

  """All values that are not equal to given value."""
  certainty_not: Int

  """All values that are contained in given list."""
  certainty_in: [Int!]

  """All values that are not contained in given list."""
  certainty_not_in: [Int!]

  """All values less than the given value."""
  certainty_lt: Int

  """All values less than or equal the given value."""
  certainty_lte: Int

  """All values greater than the given value."""
  certainty_gt: Int

  """All values greater than or equal the given value."""
  certainty_gte: Int
  thumbnailUrl: String

  """All values that are not equal to given value."""
  thumbnailUrl_not: String

  """All values that are contained in given list."""
  thumbnailUrl_in: [String!]

  """All values that are not contained in given list."""
  thumbnailUrl_not_in: [String!]

  """All values less than the given value."""
  thumbnailUrl_lt: String

  """All values less than or equal the given value."""
  thumbnailUrl_lte: String

  """All values greater than the given value."""
  thumbnailUrl_gt: String

  """All values greater than or equal the given value."""
  thumbnailUrl_gte: String

  """All values containing the given string."""
  thumbnailUrl_contains: String

  """All values not containing the given string."""
  thumbnailUrl_not_contains: String

  """All values starting with the given string."""
  thumbnailUrl_starts_with: String

  """All values not starting with the given string."""
  thumbnailUrl_not_starts_with: String

  """All values ending with the given string."""
  thumbnailUrl_ends_with: String

  """All values not ending with the given string."""
  thumbnailUrl_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  animes_every: AnimeWhereInput
  animes_some: AnimeWhereInput
  animes_none: AnimeWhereInput
  episodes_every: EpisodeWhereInput
  episodes_some: EpisodeWhereInput
  episodes_none: EpisodeWhereInput
  seasons_every: SeasonWhereInput
  seasons_some: SeasonWhereInput
  seasons_none: SeasonWhereInput
  dialogues_every: DialogueWhereInput
  dialogues_some: DialogueWhereInput
  dialogues_none: DialogueWhereInput
}

input CharacterWhereUniqueInput {
  id: ID
  anilistId: Int
}

scalar DateTime

type Dialogue implements Node {
  id: ID!
  order: Int!
  character(where: CharacterWhereInput): Character!
  episode(where: EpisodeWhereInput): Episode!
  season(where: SeasonWhereInput): Season
  anime(where: AnimeWhereInput): Anime!
  start: Int!
  end: Int!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DialogueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DialogueEdge]!
  aggregate: AggregateDialogue!
}

input DialogueCreateInput {
  order: Int!
  start: Int!
  end: Int!
  text: String!
  character: CharacterCreateOneWithoutDialoguesInput!
  episode: EpisodeCreateOneWithoutDialoguesInput!
  season: SeasonCreateOneWithoutDialoguesInput
  anime: AnimeCreateOneWithoutDialoguesInput!
}

input DialogueCreateManyWithoutAnimeInput {
  create: [DialogueCreateWithoutAnimeInput!]
  connect: [DialogueWhereUniqueInput!]
}

input DialogueCreateManyWithoutCharacterInput {
  create: [DialogueCreateWithoutCharacterInput!]
  connect: [DialogueWhereUniqueInput!]
}

input DialogueCreateManyWithoutEpisodeInput {
  create: [DialogueCreateWithoutEpisodeInput!]
  connect: [DialogueWhereUniqueInput!]
}

input DialogueCreateManyWithoutSeasonInput {
  create: [DialogueCreateWithoutSeasonInput!]
  connect: [DialogueWhereUniqueInput!]
}

input DialogueCreateWithoutAnimeInput {
  order: Int!
  start: Int!
  end: Int!
  text: String!
  character: CharacterCreateOneWithoutDialoguesInput!
  episode: EpisodeCreateOneWithoutDialoguesInput!
  season: SeasonCreateOneWithoutDialoguesInput
}

input DialogueCreateWithoutCharacterInput {
  order: Int!
  start: Int!
  end: Int!
  text: String!
  episode: EpisodeCreateOneWithoutDialoguesInput!
  season: SeasonCreateOneWithoutDialoguesInput
  anime: AnimeCreateOneWithoutDialoguesInput!
}

input DialogueCreateWithoutEpisodeInput {
  order: Int!
  start: Int!
  end: Int!
  text: String!
  character: CharacterCreateOneWithoutDialoguesInput!
  season: SeasonCreateOneWithoutDialoguesInput
  anime: AnimeCreateOneWithoutDialoguesInput!
}

input DialogueCreateWithoutSeasonInput {
  order: Int!
  start: Int!
  end: Int!
  text: String!
  character: CharacterCreateOneWithoutDialoguesInput!
  episode: EpisodeCreateOneWithoutDialoguesInput!
  anime: AnimeCreateOneWithoutDialoguesInput!
}

"""An edge in a connection."""
type DialogueEdge {
  """The item at the end of the edge."""
  node: Dialogue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DialogueOrderByInput {
  id_ASC
  id_DESC
  order_ASC
  order_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DialoguePreviousValues {
  id: ID!
  order: Int!
  start: Int!
  end: Int!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DialogueSubscriptionPayload {
  mutation: MutationType!
  node: Dialogue
  updatedFields: [String!]
  previousValues: DialoguePreviousValues
}

input DialogueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DialogueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DialogueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DialogueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DialogueWhereInput
}

input DialogueUpdateInput {
  order: Int
  start: Int
  end: Int
  text: String
  character: CharacterUpdateOneRequiredWithoutDialoguesInput
  episode: EpisodeUpdateOneRequiredWithoutDialoguesInput
  season: SeasonUpdateOneWithoutDialoguesInput
  anime: AnimeUpdateOneRequiredWithoutDialoguesInput
}

input DialogueUpdateManyWithoutAnimeInput {
  create: [DialogueCreateWithoutAnimeInput!]
  connect: [DialogueWhereUniqueInput!]
  disconnect: [DialogueWhereUniqueInput!]
  delete: [DialogueWhereUniqueInput!]
  update: [DialogueUpdateWithWhereUniqueWithoutAnimeInput!]
  upsert: [DialogueUpsertWithWhereUniqueWithoutAnimeInput!]
}

input DialogueUpdateManyWithoutCharacterInput {
  create: [DialogueCreateWithoutCharacterInput!]
  connect: [DialogueWhereUniqueInput!]
  disconnect: [DialogueWhereUniqueInput!]
  delete: [DialogueWhereUniqueInput!]
  update: [DialogueUpdateWithWhereUniqueWithoutCharacterInput!]
  upsert: [DialogueUpsertWithWhereUniqueWithoutCharacterInput!]
}

input DialogueUpdateManyWithoutEpisodeInput {
  create: [DialogueCreateWithoutEpisodeInput!]
  connect: [DialogueWhereUniqueInput!]
  disconnect: [DialogueWhereUniqueInput!]
  delete: [DialogueWhereUniqueInput!]
  update: [DialogueUpdateWithWhereUniqueWithoutEpisodeInput!]
  upsert: [DialogueUpsertWithWhereUniqueWithoutEpisodeInput!]
}

input DialogueUpdateManyWithoutSeasonInput {
  create: [DialogueCreateWithoutSeasonInput!]
  connect: [DialogueWhereUniqueInput!]
  disconnect: [DialogueWhereUniqueInput!]
  delete: [DialogueWhereUniqueInput!]
  update: [DialogueUpdateWithWhereUniqueWithoutSeasonInput!]
  upsert: [DialogueUpsertWithWhereUniqueWithoutSeasonInput!]
}

input DialogueUpdateWithoutAnimeDataInput {
  order: Int
  start: Int
  end: Int
  text: String
  character: CharacterUpdateOneRequiredWithoutDialoguesInput
  episode: EpisodeUpdateOneRequiredWithoutDialoguesInput
  season: SeasonUpdateOneWithoutDialoguesInput
}

input DialogueUpdateWithoutCharacterDataInput {
  order: Int
  start: Int
  end: Int
  text: String
  episode: EpisodeUpdateOneRequiredWithoutDialoguesInput
  season: SeasonUpdateOneWithoutDialoguesInput
  anime: AnimeUpdateOneRequiredWithoutDialoguesInput
}

input DialogueUpdateWithoutEpisodeDataInput {
  order: Int
  start: Int
  end: Int
  text: String
  character: CharacterUpdateOneRequiredWithoutDialoguesInput
  season: SeasonUpdateOneWithoutDialoguesInput
  anime: AnimeUpdateOneRequiredWithoutDialoguesInput
}

input DialogueUpdateWithoutSeasonDataInput {
  order: Int
  start: Int
  end: Int
  text: String
  character: CharacterUpdateOneRequiredWithoutDialoguesInput
  episode: EpisodeUpdateOneRequiredWithoutDialoguesInput
  anime: AnimeUpdateOneRequiredWithoutDialoguesInput
}

input DialogueUpdateWithWhereUniqueWithoutAnimeInput {
  where: DialogueWhereUniqueInput!
  data: DialogueUpdateWithoutAnimeDataInput!
}

input DialogueUpdateWithWhereUniqueWithoutCharacterInput {
  where: DialogueWhereUniqueInput!
  data: DialogueUpdateWithoutCharacterDataInput!
}

input DialogueUpdateWithWhereUniqueWithoutEpisodeInput {
  where: DialogueWhereUniqueInput!
  data: DialogueUpdateWithoutEpisodeDataInput!
}

input DialogueUpdateWithWhereUniqueWithoutSeasonInput {
  where: DialogueWhereUniqueInput!
  data: DialogueUpdateWithoutSeasonDataInput!
}

input DialogueUpsertWithWhereUniqueWithoutAnimeInput {
  where: DialogueWhereUniqueInput!
  update: DialogueUpdateWithoutAnimeDataInput!
  create: DialogueCreateWithoutAnimeInput!
}

input DialogueUpsertWithWhereUniqueWithoutCharacterInput {
  where: DialogueWhereUniqueInput!
  update: DialogueUpdateWithoutCharacterDataInput!
  create: DialogueCreateWithoutCharacterInput!
}

input DialogueUpsertWithWhereUniqueWithoutEpisodeInput {
  where: DialogueWhereUniqueInput!
  update: DialogueUpdateWithoutEpisodeDataInput!
  create: DialogueCreateWithoutEpisodeInput!
}

input DialogueUpsertWithWhereUniqueWithoutSeasonInput {
  where: DialogueWhereUniqueInput!
  update: DialogueUpdateWithoutSeasonDataInput!
  create: DialogueCreateWithoutSeasonInput!
}

input DialogueWhereInput {
  """Logical AND on all given filters."""
  AND: [DialogueWhereInput!]

  """Logical OR on all given filters."""
  OR: [DialogueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DialogueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  start: Int

  """All values that are not equal to given value."""
  start_not: Int

  """All values that are contained in given list."""
  start_in: [Int!]

  """All values that are not contained in given list."""
  start_not_in: [Int!]

  """All values less than the given value."""
  start_lt: Int

  """All values less than or equal the given value."""
  start_lte: Int

  """All values greater than the given value."""
  start_gt: Int

  """All values greater than or equal the given value."""
  start_gte: Int
  end: Int

  """All values that are not equal to given value."""
  end_not: Int

  """All values that are contained in given list."""
  end_in: [Int!]

  """All values that are not contained in given list."""
  end_not_in: [Int!]

  """All values less than the given value."""
  end_lt: Int

  """All values less than or equal the given value."""
  end_lte: Int

  """All values greater than the given value."""
  end_gt: Int

  """All values greater than or equal the given value."""
  end_gte: Int
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  character: CharacterWhereInput
  episode: EpisodeWhereInput
  season: SeasonWhereInput
  anime: AnimeWhereInput
}

input DialogueWhereUniqueInput {
  id: ID
}

type Episode implements Node {
  id: ID!
  anime(where: AnimeWhereInput): Anime!
  season(where: SeasonWhereInput): Season
  file(where: FileWhereInput): File!
  displayName: String
  episodeNumber: String
  length: Int!
  subGroup: String!
  language: String!
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character!]
  dialogues(where: DialogueWhereInput, orderBy: DialogueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dialogue!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EpisodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EpisodeEdge]!
  aggregate: AggregateEpisode!
}

input EpisodeCreateInput {
  displayName: String
  episodeNumber: String
  length: Int!
  subGroup: String
  language: String
  anime: AnimeCreateOneWithoutEpisodesInput!
  season: SeasonCreateOneInput
  file: FileCreateOneWithoutEpisodeInput!
  characters: CharacterCreateManyWithoutEpisodesInput
  dialogues: DialogueCreateManyWithoutEpisodeInput
}

input EpisodeCreateManyWithoutAnimeInput {
  create: [EpisodeCreateWithoutAnimeInput!]
  connect: [EpisodeWhereUniqueInput!]
}

input EpisodeCreateManyWithoutCharactersInput {
  create: [EpisodeCreateWithoutCharactersInput!]
  connect: [EpisodeWhereUniqueInput!]
}

input EpisodeCreateOneWithoutDialoguesInput {
  create: EpisodeCreateWithoutDialoguesInput
  connect: EpisodeWhereUniqueInput
}

input EpisodeCreateOneWithoutFileInput {
  create: EpisodeCreateWithoutFileInput
  connect: EpisodeWhereUniqueInput
}

input EpisodeCreateWithoutAnimeInput {
  displayName: String
  episodeNumber: String
  length: Int!
  subGroup: String
  language: String
  season: SeasonCreateOneInput
  file: FileCreateOneWithoutEpisodeInput!
  characters: CharacterCreateManyWithoutEpisodesInput
  dialogues: DialogueCreateManyWithoutEpisodeInput
}

input EpisodeCreateWithoutCharactersInput {
  displayName: String
  episodeNumber: String
  length: Int!
  subGroup: String
  language: String
  anime: AnimeCreateOneWithoutEpisodesInput!
  season: SeasonCreateOneInput
  file: FileCreateOneWithoutEpisodeInput!
  dialogues: DialogueCreateManyWithoutEpisodeInput
}

input EpisodeCreateWithoutDialoguesInput {
  displayName: String
  episodeNumber: String
  length: Int!
  subGroup: String
  language: String
  anime: AnimeCreateOneWithoutEpisodesInput!
  season: SeasonCreateOneInput
  file: FileCreateOneWithoutEpisodeInput!
  characters: CharacterCreateManyWithoutEpisodesInput
}

input EpisodeCreateWithoutFileInput {
  displayName: String
  episodeNumber: String
  length: Int!
  subGroup: String
  language: String
  anime: AnimeCreateOneWithoutEpisodesInput!
  season: SeasonCreateOneInput
  characters: CharacterCreateManyWithoutEpisodesInput
  dialogues: DialogueCreateManyWithoutEpisodeInput
}

"""An edge in a connection."""
type EpisodeEdge {
  """The item at the end of the edge."""
  node: Episode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EpisodeOrderByInput {
  id_ASC
  id_DESC
  displayName_ASC
  displayName_DESC
  episodeNumber_ASC
  episodeNumber_DESC
  length_ASC
  length_DESC
  subGroup_ASC
  subGroup_DESC
  language_ASC
  language_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EpisodePreviousValues {
  id: ID!
  displayName: String
  episodeNumber: String
  length: Int!
  subGroup: String!
  language: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EpisodeSubscriptionPayload {
  mutation: MutationType!
  node: Episode
  updatedFields: [String!]
  previousValues: EpisodePreviousValues
}

input EpisodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EpisodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpisodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpisodeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EpisodeWhereInput
}

input EpisodeUpdateInput {
  displayName: String
  episodeNumber: String
  length: Int
  subGroup: String
  language: String
  anime: AnimeUpdateOneRequiredWithoutEpisodesInput
  season: SeasonUpdateOneInput
  file: FileUpdateOneRequiredWithoutEpisodeInput
  characters: CharacterUpdateManyWithoutEpisodesInput
  dialogues: DialogueUpdateManyWithoutEpisodeInput
}

input EpisodeUpdateManyWithoutAnimeInput {
  create: [EpisodeCreateWithoutAnimeInput!]
  connect: [EpisodeWhereUniqueInput!]
  disconnect: [EpisodeWhereUniqueInput!]
  delete: [EpisodeWhereUniqueInput!]
  update: [EpisodeUpdateWithWhereUniqueWithoutAnimeInput!]
  upsert: [EpisodeUpsertWithWhereUniqueWithoutAnimeInput!]
}

input EpisodeUpdateManyWithoutCharactersInput {
  create: [EpisodeCreateWithoutCharactersInput!]
  connect: [EpisodeWhereUniqueInput!]
  disconnect: [EpisodeWhereUniqueInput!]
  delete: [EpisodeWhereUniqueInput!]
  update: [EpisodeUpdateWithWhereUniqueWithoutCharactersInput!]
  upsert: [EpisodeUpsertWithWhereUniqueWithoutCharactersInput!]
}

input EpisodeUpdateOneRequiredWithoutDialoguesInput {
  create: EpisodeCreateWithoutDialoguesInput
  connect: EpisodeWhereUniqueInput
  update: EpisodeUpdateWithoutDialoguesDataInput
  upsert: EpisodeUpsertWithoutDialoguesInput
}

input EpisodeUpdateOneRequiredWithoutFileInput {
  create: EpisodeCreateWithoutFileInput
  connect: EpisodeWhereUniqueInput
  update: EpisodeUpdateWithoutFileDataInput
  upsert: EpisodeUpsertWithoutFileInput
}

input EpisodeUpdateWithoutAnimeDataInput {
  displayName: String
  episodeNumber: String
  length: Int
  subGroup: String
  language: String
  season: SeasonUpdateOneInput
  file: FileUpdateOneRequiredWithoutEpisodeInput
  characters: CharacterUpdateManyWithoutEpisodesInput
  dialogues: DialogueUpdateManyWithoutEpisodeInput
}

input EpisodeUpdateWithoutCharactersDataInput {
  displayName: String
  episodeNumber: String
  length: Int
  subGroup: String
  language: String
  anime: AnimeUpdateOneRequiredWithoutEpisodesInput
  season: SeasonUpdateOneInput
  file: FileUpdateOneRequiredWithoutEpisodeInput
  dialogues: DialogueUpdateManyWithoutEpisodeInput
}

input EpisodeUpdateWithoutDialoguesDataInput {
  displayName: String
  episodeNumber: String
  length: Int
  subGroup: String
  language: String
  anime: AnimeUpdateOneRequiredWithoutEpisodesInput
  season: SeasonUpdateOneInput
  file: FileUpdateOneRequiredWithoutEpisodeInput
  characters: CharacterUpdateManyWithoutEpisodesInput
}

input EpisodeUpdateWithoutFileDataInput {
  displayName: String
  episodeNumber: String
  length: Int
  subGroup: String
  language: String
  anime: AnimeUpdateOneRequiredWithoutEpisodesInput
  season: SeasonUpdateOneInput
  characters: CharacterUpdateManyWithoutEpisodesInput
  dialogues: DialogueUpdateManyWithoutEpisodeInput
}

input EpisodeUpdateWithWhereUniqueWithoutAnimeInput {
  where: EpisodeWhereUniqueInput!
  data: EpisodeUpdateWithoutAnimeDataInput!
}

input EpisodeUpdateWithWhereUniqueWithoutCharactersInput {
  where: EpisodeWhereUniqueInput!
  data: EpisodeUpdateWithoutCharactersDataInput!
}

input EpisodeUpsertWithoutDialoguesInput {
  update: EpisodeUpdateWithoutDialoguesDataInput!
  create: EpisodeCreateWithoutDialoguesInput!
}

input EpisodeUpsertWithoutFileInput {
  update: EpisodeUpdateWithoutFileDataInput!
  create: EpisodeCreateWithoutFileInput!
}

input EpisodeUpsertWithWhereUniqueWithoutAnimeInput {
  where: EpisodeWhereUniqueInput!
  update: EpisodeUpdateWithoutAnimeDataInput!
  create: EpisodeCreateWithoutAnimeInput!
}

input EpisodeUpsertWithWhereUniqueWithoutCharactersInput {
  where: EpisodeWhereUniqueInput!
  update: EpisodeUpdateWithoutCharactersDataInput!
  create: EpisodeCreateWithoutCharactersInput!
}

input EpisodeWhereInput {
  """Logical AND on all given filters."""
  AND: [EpisodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpisodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpisodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  episodeNumber: String

  """All values that are not equal to given value."""
  episodeNumber_not: String

  """All values that are contained in given list."""
  episodeNumber_in: [String!]

  """All values that are not contained in given list."""
  episodeNumber_not_in: [String!]

  """All values less than the given value."""
  episodeNumber_lt: String

  """All values less than or equal the given value."""
  episodeNumber_lte: String

  """All values greater than the given value."""
  episodeNumber_gt: String

  """All values greater than or equal the given value."""
  episodeNumber_gte: String

  """All values containing the given string."""
  episodeNumber_contains: String

  """All values not containing the given string."""
  episodeNumber_not_contains: String

  """All values starting with the given string."""
  episodeNumber_starts_with: String

  """All values not starting with the given string."""
  episodeNumber_not_starts_with: String

  """All values ending with the given string."""
  episodeNumber_ends_with: String

  """All values not ending with the given string."""
  episodeNumber_not_ends_with: String
  length: Int

  """All values that are not equal to given value."""
  length_not: Int

  """All values that are contained in given list."""
  length_in: [Int!]

  """All values that are not contained in given list."""
  length_not_in: [Int!]

  """All values less than the given value."""
  length_lt: Int

  """All values less than or equal the given value."""
  length_lte: Int

  """All values greater than the given value."""
  length_gt: Int

  """All values greater than or equal the given value."""
  length_gte: Int
  subGroup: String

  """All values that are not equal to given value."""
  subGroup_not: String

  """All values that are contained in given list."""
  subGroup_in: [String!]

  """All values that are not contained in given list."""
  subGroup_not_in: [String!]

  """All values less than the given value."""
  subGroup_lt: String

  """All values less than or equal the given value."""
  subGroup_lte: String

  """All values greater than the given value."""
  subGroup_gt: String

  """All values greater than or equal the given value."""
  subGroup_gte: String

  """All values containing the given string."""
  subGroup_contains: String

  """All values not containing the given string."""
  subGroup_not_contains: String

  """All values starting with the given string."""
  subGroup_starts_with: String

  """All values not starting with the given string."""
  subGroup_not_starts_with: String

  """All values ending with the given string."""
  subGroup_ends_with: String

  """All values not ending with the given string."""
  subGroup_not_ends_with: String
  language: String

  """All values that are not equal to given value."""
  language_not: String

  """All values that are contained in given list."""
  language_in: [String!]

  """All values that are not contained in given list."""
  language_not_in: [String!]

  """All values less than the given value."""
  language_lt: String

  """All values less than or equal the given value."""
  language_lte: String

  """All values greater than the given value."""
  language_gt: String

  """All values greater than or equal the given value."""
  language_gte: String

  """All values containing the given string."""
  language_contains: String

  """All values not containing the given string."""
  language_not_contains: String

  """All values starting with the given string."""
  language_starts_with: String

  """All values not starting with the given string."""
  language_not_starts_with: String

  """All values ending with the given string."""
  language_ends_with: String

  """All values not ending with the given string."""
  language_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  anime: AnimeWhereInput
  season: SeasonWhereInput
  file: FileWhereInput
  characters_every: CharacterWhereInput
  characters_some: CharacterWhereInput
  characters_none: CharacterWhereInput
  dialogues_every: DialogueWhereInput
  dialogues_some: DialogueWhereInput
  dialogues_none: DialogueWhereInput
}

input EpisodeWhereUniqueInput {
  id: ID
}

type File implements Node {
  id: ID!
  anime(where: AnimeWhereInput): Anime!
  archive(where: ArchiveWhereInput): Archive
  linkUrl: String
  fileName: String!
  episode(where: EpisodeWhereInput): Episode!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  linkUrl: String
  fileName: String!
  anime: AnimeCreateOneWithoutFilesInput!
  archive: ArchiveCreateOneWithoutFilesInput
  episode: EpisodeCreateOneWithoutFileInput!
}

input FileCreateManyWithoutAnimeInput {
  create: [FileCreateWithoutAnimeInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutArchiveInput {
  create: [FileCreateWithoutArchiveInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneWithoutEpisodeInput {
  create: FileCreateWithoutEpisodeInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutAnimeInput {
  linkUrl: String
  fileName: String!
  archive: ArchiveCreateOneWithoutFilesInput
  episode: EpisodeCreateOneWithoutFileInput!
}

input FileCreateWithoutArchiveInput {
  linkUrl: String
  fileName: String!
  anime: AnimeCreateOneWithoutFilesInput!
  episode: EpisodeCreateOneWithoutFileInput!
}

input FileCreateWithoutEpisodeInput {
  linkUrl: String
  fileName: String!
  anime: AnimeCreateOneWithoutFilesInput!
  archive: ArchiveCreateOneWithoutFilesInput
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  linkUrl_ASC
  linkUrl_DESC
  fileName_ASC
  fileName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  linkUrl: String
  fileName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  linkUrl: String
  fileName: String
  anime: AnimeUpdateOneRequiredWithoutFilesInput
  archive: ArchiveUpdateOneWithoutFilesInput
  episode: EpisodeUpdateOneRequiredWithoutFileInput
}

input FileUpdateManyWithoutAnimeInput {
  create: [FileCreateWithoutAnimeInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutAnimeInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutAnimeInput!]
}

input FileUpdateManyWithoutArchiveInput {
  create: [FileCreateWithoutArchiveInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutArchiveInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutArchiveInput!]
}

input FileUpdateOneRequiredWithoutEpisodeInput {
  create: FileCreateWithoutEpisodeInput
  connect: FileWhereUniqueInput
  update: FileUpdateWithoutEpisodeDataInput
  upsert: FileUpsertWithoutEpisodeInput
}

input FileUpdateWithoutAnimeDataInput {
  linkUrl: String
  fileName: String
  archive: ArchiveUpdateOneWithoutFilesInput
  episode: EpisodeUpdateOneRequiredWithoutFileInput
}

input FileUpdateWithoutArchiveDataInput {
  linkUrl: String
  fileName: String
  anime: AnimeUpdateOneRequiredWithoutFilesInput
  episode: EpisodeUpdateOneRequiredWithoutFileInput
}

input FileUpdateWithoutEpisodeDataInput {
  linkUrl: String
  fileName: String
  anime: AnimeUpdateOneRequiredWithoutFilesInput
  archive: ArchiveUpdateOneWithoutFilesInput
}

input FileUpdateWithWhereUniqueWithoutAnimeInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutAnimeDataInput!
}

input FileUpdateWithWhereUniqueWithoutArchiveInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutArchiveDataInput!
}

input FileUpsertWithoutEpisodeInput {
  update: FileUpdateWithoutEpisodeDataInput!
  create: FileCreateWithoutEpisodeInput!
}

input FileUpsertWithWhereUniqueWithoutAnimeInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutAnimeDataInput!
  create: FileCreateWithoutAnimeInput!
}

input FileUpsertWithWhereUniqueWithoutArchiveInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutArchiveDataInput!
  create: FileCreateWithoutArchiveInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  linkUrl: String

  """All values that are not equal to given value."""
  linkUrl_not: String

  """All values that are contained in given list."""
  linkUrl_in: [String!]

  """All values that are not contained in given list."""
  linkUrl_not_in: [String!]

  """All values less than the given value."""
  linkUrl_lt: String

  """All values less than or equal the given value."""
  linkUrl_lte: String

  """All values greater than the given value."""
  linkUrl_gt: String

  """All values greater than or equal the given value."""
  linkUrl_gte: String

  """All values containing the given string."""
  linkUrl_contains: String

  """All values not containing the given string."""
  linkUrl_not_contains: String

  """All values starting with the given string."""
  linkUrl_starts_with: String

  """All values not starting with the given string."""
  linkUrl_not_starts_with: String

  """All values ending with the given string."""
  linkUrl_ends_with: String

  """All values not ending with the given string."""
  linkUrl_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values less than the given value."""
  fileName_lt: String

  """All values less than or equal the given value."""
  fileName_lte: String

  """All values greater than the given value."""
  fileName_gt: String

  """All values greater than or equal the given value."""
  fileName_gte: String

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string."""
  fileName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  anime: AnimeWhereInput
  archive: ArchiveWhereInput
  episode: EpisodeWhereInput
}

input FileWhereUniqueInput {
  id: ID
  fileName: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAPIKey(data: APIKeyCreateInput!): APIKey!
  createAnime(data: AnimeCreateInput!): Anime!
  createCharacter(data: CharacterCreateInput!): Character!
  createDialogue(data: DialogueCreateInput!): Dialogue!
  createEpisode(data: EpisodeCreateInput!): Episode!
  createFile(data: FileCreateInput!): File!
  createSeason(data: SeasonCreateInput!): Season!
  createUser(data: UserCreateInput!): User!
  createArchive(data: ArchiveCreateInput!): Archive!
  updateAnime(data: AnimeUpdateInput!, where: AnimeWhereUniqueInput!): Anime
  updateCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
  updateDialogue(data: DialogueUpdateInput!, where: DialogueWhereUniqueInput!): Dialogue
  updateEpisode(data: EpisodeUpdateInput!, where: EpisodeWhereUniqueInput!): Episode
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateSeason(data: SeasonUpdateInput!, where: SeasonWhereUniqueInput!): Season
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateArchive(data: ArchiveUpdateInput!, where: ArchiveWhereUniqueInput!): Archive
  deleteAnime(where: AnimeWhereUniqueInput!): Anime
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteDialogue(where: DialogueWhereUniqueInput!): Dialogue
  deleteEpisode(where: EpisodeWhereUniqueInput!): Episode
  deleteFile(where: FileWhereUniqueInput!): File
  deleteSeason(where: SeasonWhereUniqueInput!): Season
  deleteUser(where: UserWhereUniqueInput!): User
  deleteArchive(where: ArchiveWhereUniqueInput!): Archive
  upsertAnime(where: AnimeWhereUniqueInput!, create: AnimeCreateInput!, update: AnimeUpdateInput!): Anime!
  upsertCharacter(where: CharacterWhereUniqueInput!, create: CharacterCreateInput!, update: CharacterUpdateInput!): Character!
  upsertDialogue(where: DialogueWhereUniqueInput!, create: DialogueCreateInput!, update: DialogueUpdateInput!): Dialogue!
  upsertEpisode(where: EpisodeWhereUniqueInput!, create: EpisodeCreateInput!, update: EpisodeUpdateInput!): Episode!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertSeason(where: SeasonWhereUniqueInput!, create: SeasonCreateInput!, update: SeasonUpdateInput!): Season!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertArchive(where: ArchiveWhereUniqueInput!, create: ArchiveCreateInput!, update: ArchiveUpdateInput!): Archive!
  updateManyAPIKeys(data: APIKeyUpdateInput!, where: APIKeyWhereInput): BatchPayload!
  updateManyAnimes(data: AnimeUpdateInput!, where: AnimeWhereInput): BatchPayload!
  updateManyCharacters(data: CharacterUpdateInput!, where: CharacterWhereInput): BatchPayload!
  updateManyDialogues(data: DialogueUpdateInput!, where: DialogueWhereInput): BatchPayload!
  updateManyEpisodes(data: EpisodeUpdateInput!, where: EpisodeWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  updateManySeasons(data: SeasonUpdateInput!, where: SeasonWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyArchives(data: ArchiveUpdateInput!, where: ArchiveWhereInput): BatchPayload!
  deleteManyAPIKeys(where: APIKeyWhereInput): BatchPayload!
  deleteManyAnimes(where: AnimeWhereInput): BatchPayload!
  deleteManyCharacters(where: CharacterWhereInput): BatchPayload!
  deleteManyDialogues(where: DialogueWhereInput): BatchPayload!
  deleteManyEpisodes(where: EpisodeWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManySeasons(where: SeasonWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyArchives(where: ArchiveWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  aPIKeys(where: APIKeyWhereInput, orderBy: APIKeyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [APIKey]!
  animes(where: AnimeWhereInput, orderBy: AnimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Anime]!
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character]!
  dialogues(where: DialogueWhereInput, orderBy: DialogueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dialogue]!
  episodes(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Episode]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  seasons(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Season]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  archives(where: ArchiveWhereInput, orderBy: ArchiveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Archive]!
  anime(where: AnimeWhereUniqueInput!): Anime
  character(where: CharacterWhereUniqueInput!): Character
  dialogue(where: DialogueWhereUniqueInput!): Dialogue
  episode(where: EpisodeWhereUniqueInput!): Episode
  file(where: FileWhereUniqueInput!): File
  season(where: SeasonWhereUniqueInput!): Season
  user(where: UserWhereUniqueInput!): User
  archive(where: ArchiveWhereUniqueInput!): Archive
  aPIKeysConnection(where: APIKeyWhereInput, orderBy: APIKeyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): APIKeyConnection!
  animesConnection(where: AnimeWhereInput, orderBy: AnimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnimeConnection!
  charactersConnection(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterConnection!
  dialoguesConnection(where: DialogueWhereInput, orderBy: DialogueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DialogueConnection!
  episodesConnection(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EpisodeConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  seasonsConnection(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeasonConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  archivesConnection(where: ArchiveWhereInput, orderBy: ArchiveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArchiveConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Season implements Node {
  id: ID!
  anime(where: AnimeWhereInput): Anime!
  archive(where: ArchiveWhereInput): Archive
  dialogues(where: DialogueWhereInput, orderBy: DialogueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dialogue!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SeasonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeasonEdge]!
  aggregate: AggregateSeason!
}

input SeasonCreateInput {
  anime: AnimeCreateOneWithoutSeasonsInput!
  archive: ArchiveCreateOneInput
  dialogues: DialogueCreateManyWithoutSeasonInput
}

input SeasonCreateManyInput {
  create: [SeasonCreateInput!]
  connect: [SeasonWhereUniqueInput!]
}

input SeasonCreateManyWithoutAnimeInput {
  create: [SeasonCreateWithoutAnimeInput!]
  connect: [SeasonWhereUniqueInput!]
}

input SeasonCreateOneInput {
  create: SeasonCreateInput
  connect: SeasonWhereUniqueInput
}

input SeasonCreateOneWithoutDialoguesInput {
  create: SeasonCreateWithoutDialoguesInput
  connect: SeasonWhereUniqueInput
}

input SeasonCreateWithoutAnimeInput {
  archive: ArchiveCreateOneInput
  dialogues: DialogueCreateManyWithoutSeasonInput
}

input SeasonCreateWithoutDialoguesInput {
  anime: AnimeCreateOneWithoutSeasonsInput!
  archive: ArchiveCreateOneInput
}

"""An edge in a connection."""
type SeasonEdge {
  """The item at the end of the edge."""
  node: Season!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SeasonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SeasonPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SeasonSubscriptionPayload {
  mutation: MutationType!
  node: Season
  updatedFields: [String!]
  previousValues: SeasonPreviousValues
}

input SeasonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SeasonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeasonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeasonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeasonWhereInput
}

input SeasonUpdateDataInput {
  anime: AnimeUpdateOneRequiredWithoutSeasonsInput
  archive: ArchiveUpdateOneInput
  dialogues: DialogueUpdateManyWithoutSeasonInput
}

input SeasonUpdateInput {
  anime: AnimeUpdateOneRequiredWithoutSeasonsInput
  archive: ArchiveUpdateOneInput
  dialogues: DialogueUpdateManyWithoutSeasonInput
}

input SeasonUpdateManyInput {
  create: [SeasonCreateInput!]
  connect: [SeasonWhereUniqueInput!]
  disconnect: [SeasonWhereUniqueInput!]
  delete: [SeasonWhereUniqueInput!]
  update: [SeasonUpdateWithWhereUniqueNestedInput!]
  upsert: [SeasonUpsertWithWhereUniqueNestedInput!]
}

input SeasonUpdateManyWithoutAnimeInput {
  create: [SeasonCreateWithoutAnimeInput!]
  connect: [SeasonWhereUniqueInput!]
  disconnect: [SeasonWhereUniqueInput!]
  delete: [SeasonWhereUniqueInput!]
  update: [SeasonUpdateWithWhereUniqueWithoutAnimeInput!]
  upsert: [SeasonUpsertWithWhereUniqueWithoutAnimeInput!]
}

input SeasonUpdateOneInput {
  create: SeasonCreateInput
  connect: SeasonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SeasonUpdateDataInput
  upsert: SeasonUpsertNestedInput
}

input SeasonUpdateOneWithoutDialoguesInput {
  create: SeasonCreateWithoutDialoguesInput
  connect: SeasonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SeasonUpdateWithoutDialoguesDataInput
  upsert: SeasonUpsertWithoutDialoguesInput
}

input SeasonUpdateWithoutAnimeDataInput {
  archive: ArchiveUpdateOneInput
  dialogues: DialogueUpdateManyWithoutSeasonInput
}

input SeasonUpdateWithoutDialoguesDataInput {
  anime: AnimeUpdateOneRequiredWithoutSeasonsInput
  archive: ArchiveUpdateOneInput
}

input SeasonUpdateWithWhereUniqueNestedInput {
  where: SeasonWhereUniqueInput!
  data: SeasonUpdateDataInput!
}

input SeasonUpdateWithWhereUniqueWithoutAnimeInput {
  where: SeasonWhereUniqueInput!
  data: SeasonUpdateWithoutAnimeDataInput!
}

input SeasonUpsertNestedInput {
  update: SeasonUpdateDataInput!
  create: SeasonCreateInput!
}

input SeasonUpsertWithoutDialoguesInput {
  update: SeasonUpdateWithoutDialoguesDataInput!
  create: SeasonCreateWithoutDialoguesInput!
}

input SeasonUpsertWithWhereUniqueNestedInput {
  where: SeasonWhereUniqueInput!
  update: SeasonUpdateDataInput!
  create: SeasonCreateInput!
}

input SeasonUpsertWithWhereUniqueWithoutAnimeInput {
  where: SeasonWhereUniqueInput!
  update: SeasonUpdateWithoutAnimeDataInput!
  create: SeasonCreateWithoutAnimeInput!
}

input SeasonWhereInput {
  """Logical AND on all given filters."""
  AND: [SeasonWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeasonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeasonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  anime: AnimeWhereInput
  archive: ArchiveWhereInput
  dialogues_every: DialogueWhereInput
  dialogues_some: DialogueWhereInput
  dialogues_none: DialogueWhereInput
}

input SeasonWhereUniqueInput {
  id: ID
}

type Subscription {
  aPIKey(where: APIKeySubscriptionWhereInput): APIKeySubscriptionPayload
  anime(where: AnimeSubscriptionWhereInput): AnimeSubscriptionPayload
  character(where: CharacterSubscriptionWhereInput): CharacterSubscriptionPayload
  dialogue(where: DialogueSubscriptionWhereInput): DialogueSubscriptionPayload
  episode(where: EpisodeSubscriptionWhereInput): EpisodeSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  season(where: SeasonSubscriptionWhereInput): SeasonSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  archive(where: ArchiveSubscriptionWhereInput): ArchiveSubscriptionPayload
}

type User implements Node {
  name: String!
  email: String!
  anilistName: String
  malName: String
  profilePicture: String
  description: String
  id: ID!
  hash: String!
  salt: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  anilistName: String
  malName: String
  profilePicture: String
  description: String
  hash: String!
  salt: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  anilistName_ASC
  anilistName_DESC
  malName_ASC
  malName_DESC
  profilePicture_ASC
  profilePicture_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  hash_ASC
  hash_DESC
  salt_ASC
  salt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  name: String!
  email: String!
  anilistName: String
  malName: String
  profilePicture: String
  description: String
  id: ID!
  hash: String!
  salt: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  anilistName: String
  malName: String
  profilePicture: String
  description: String
  hash: String
  salt: String
}

input UserUpdateInput {
  name: String
  email: String
  anilistName: String
  malName: String
  profilePicture: String
  description: String
  hash: String
  salt: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  anilistName: String

  """All values that are not equal to given value."""
  anilistName_not: String

  """All values that are contained in given list."""
  anilistName_in: [String!]

  """All values that are not contained in given list."""
  anilistName_not_in: [String!]

  """All values less than the given value."""
  anilistName_lt: String

  """All values less than or equal the given value."""
  anilistName_lte: String

  """All values greater than the given value."""
  anilistName_gt: String

  """All values greater than or equal the given value."""
  anilistName_gte: String

  """All values containing the given string."""
  anilistName_contains: String

  """All values not containing the given string."""
  anilistName_not_contains: String

  """All values starting with the given string."""
  anilistName_starts_with: String

  """All values not starting with the given string."""
  anilistName_not_starts_with: String

  """All values ending with the given string."""
  anilistName_ends_with: String

  """All values not ending with the given string."""
  anilistName_not_ends_with: String
  malName: String

  """All values that are not equal to given value."""
  malName_not: String

  """All values that are contained in given list."""
  malName_in: [String!]

  """All values that are not contained in given list."""
  malName_not_in: [String!]

  """All values less than the given value."""
  malName_lt: String

  """All values less than or equal the given value."""
  malName_lte: String

  """All values greater than the given value."""
  malName_gt: String

  """All values greater than or equal the given value."""
  malName_gte: String

  """All values containing the given string."""
  malName_contains: String

  """All values not containing the given string."""
  malName_not_contains: String

  """All values starting with the given string."""
  malName_starts_with: String

  """All values not starting with the given string."""
  malName_not_starts_with: String

  """All values ending with the given string."""
  malName_ends_with: String

  """All values not ending with the given string."""
  malName_not_ends_with: String
  profilePicture: String

  """All values that are not equal to given value."""
  profilePicture_not: String

  """All values that are contained in given list."""
  profilePicture_in: [String!]

  """All values that are not contained in given list."""
  profilePicture_not_in: [String!]

  """All values less than the given value."""
  profilePicture_lt: String

  """All values less than or equal the given value."""
  profilePicture_lte: String

  """All values greater than the given value."""
  profilePicture_gt: String

  """All values greater than or equal the given value."""
  profilePicture_gte: String

  """All values containing the given string."""
  profilePicture_contains: String

  """All values not containing the given string."""
  profilePicture_not_contains: String

  """All values starting with the given string."""
  profilePicture_starts_with: String

  """All values not starting with the given string."""
  profilePicture_not_starts_with: String

  """All values ending with the given string."""
  profilePicture_ends_with: String

  """All values not ending with the given string."""
  profilePicture_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  salt: String

  """All values that are not equal to given value."""
  salt_not: String

  """All values that are contained in given list."""
  salt_in: [String!]

  """All values that are not contained in given list."""
  salt_not_in: [String!]

  """All values less than the given value."""
  salt_lt: String

  """All values less than or equal the given value."""
  salt_lte: String

  """All values greater than the given value."""
  salt_gt: String

  """All values greater than or equal the given value."""
  salt_gte: String

  """All values containing the given string."""
  salt_contains: String

  """All values not containing the given string."""
  salt_not_contains: String

  """All values starting with the given string."""
  salt_starts_with: String

  """All values not starting with the given string."""
  salt_not_starts_with: String

  """All values ending with the given string."""
  salt_ends_with: String

  """All values not ending with the given string."""
  salt_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
